name: Deploy to Kubernetes

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      # Dieser Schritt checkt den Repository-Code aus, damit der Workflow darauf zugreifen kann.

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
      # Dieser Schritt richtet die Python-Umgebung mit der angegebenen Version aus der Matrix ein.

    - name: Install dependencies
      run: |
        set -e
        python -m pip install --upgrade pip
        pip install poetry==1.4.0
        poetry install
      # Dieser Schritt installiert die notwendigen Python-Abhängigkeiten mit Poetry.

    - name: Build Docker image
      run: |
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
        set -e
        make docker
      # Dieser Schritt erstellt das Docker-Image unter Verwendung des POSTGRES_PASSWORD-Geheimnisses zur Konfiguration.

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      # Dieser Schritt loggt sich mit den in den Geheimnissen gespeicherten Anmeldedaten bei Docker Hub ein.

    - name: Push Docker image
      run: |
        set -e
        make docker-push
      # Dieser Schritt pusht das erstellte Docker-Image zu Docker Hub.

    - name: Set up K8s
      uses: azure/setup-kubectl@v1
      with:
        version: ${{ secrets.K8S_VERSION }}
      # Dieser Schritt richtet kubectl ein, um mit dem Kubernetes-Cluster zu interagieren.

    - name: Create K8s secrets
      run: |
        set -e
        make create-k8s-secrets
      # Dieser Schritt erstellt die notwendigen Kubernetes-Geheimnisse für die Bereitstellung.

    - name: Deploy to Kubernetes
      run: |
        set -e
        make deploy
      # Dieser Schritt stellt die Anwendung mit dem Makefile-Befehl im Kubernetes-Cluster bereit.

